name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false
    
jobs:
  tests:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]

    name: Tests
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Poetry install and configure
        run: |
          pip install poetry
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry install --no-root

      - name: Run tests
        run: |
          poetry run tox -e py312

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}          

  code-quality:
    name: Code Quality
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Poetry install and configure
        run: |
          pip install poetry
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry install --no-root

      - name: Run formatter
        run: |
          poetry run tox -e formatter

      - name: Run linter
        run: |
          poetry run tox -e linter

      - name: Run typer
        run: |
          poetry run tox -e typer

      - name: Run build
        run: |
          poetry run tox -e build

  documentation:
    name: Documentation
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Poetry install and configure
        run: |
          pip install poetry
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry install --no-root

      - name: Run documentation
        run: |
          poetry run tox -e documentation
      
  deploy-documentation:
    name: Deploy documentation
    needs: [tests, code-quality, documentation]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry and install dependencies
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry install --no-root

      - name: Build documentation
        run: poetry run tox -e documentation

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'build/'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-package:
    name: Deploy package
    needs: [tests, code-quality, documentation]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry and install dependencies
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry install --no-root

      - name: Build documentation
        run: poetry run tox -e build

      - name: Publish package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish --build